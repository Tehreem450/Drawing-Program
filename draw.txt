import pygame as pg
from tkinter import *
from tkinter import messagebox
from tkinter.filedialog import askopenfilename, asksaveasfilename
import sys

sys.setrecursionlimit(10000)
pg.init()

sw, sh = 960, 850
sc = (sw//2, sh//2)
screen = pg.display.set_mode((sw, sh))
pg.display.set_caption("PyDraw By Tahrim and Anzila")
pg.display.set_icon(pg.image.load("icon.png"))

fillImage = pg.transform.scale(pg.image.load("fill.png"), (40,40))
brushImage = pg.transform.scale(pg.image.load("brush.png"), (25,25))
eraserImage = pg.transform.scale(pg.image.load("eraser.png"), (25,25))
dropperImage = pg.transform.scale(pg.image.load("eyedropper.png"), (30,30))

def Remap(oldlow, oldhigh, newlow, newhigh, value):
    oldRange = (oldhigh - oldlow)
    newRange = (newhigh - newlow)
    newVal = (((value - oldlow) * newRange) / oldRange) + newlow
    return newVal



def draw_walls():
    wall_color = (50,50,50)
    wall_thickness = 4

    pg.draw.rect(screen, (150,150,150), (g1.xCount * g1.cellSize, 0, sw - g1.xCount * g1.cellSize, g1.yCount*g1.cellSize))
    pg.draw.rect(screen, (80,80,80), (0, g1.xCount * g1.cellSize, sw, sh-g1.yCount*g1.cellSize))

    pg.draw.rect(screen, wall_color, (g1.xCount * g1.cellSize, 0, wall_thickness, g1.yCount*g1.cellSize))
    pg.draw.rect(screen, wall_color, (0, g1.yCount*g1.cellSize-wall_thickness, sw, wall_thickness))

    pg.draw.rect(screen, wall_color, (0, 0, sw, wall_thickness))
    pg.draw.rect(screen, wall_color, (sw-wall_thickness, 0, wall_thickness, sh))
    pg.draw.rect(screen, wall_color, (0, 0, wall_thickness, sh))
    pg.draw.rect(screen, wall_color, (0, sh - wall_thickness, sw, wall_thickness))


class Cell(object):

    def __init__(self, size, color=[0, 0, 0]):
        self.size = size
        self.color = color
        self.subsurface = pg.Surface((self.size,self.size))
        self.subsurface.fill(self.color)
        self.pos = (0, 0)

    def change_color(self, color):
        self.color = color
        self.subsurface.fill(self.color)

    def Draw(self, win, x, y):
        self.pos = (x, y)
        win.blit(self.subsurface, self.pos)
if sizeToDraw == 1:
        mouseRelPosX = max(penSize - 1, min(g1.xCount - 1, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 1, min(g1.yCount - 1, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
    if sizeToDraw == 2:
        mouseRelPosX = max(penSize - 1, min(g1.xCount - 2, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 1, min(g1.yCount - 2, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
    if sizeToDraw == 3:
        mouseRelPosX = max(penSize - 2, min(g1.xCount - 2, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 2, min(g1.yCount - 2, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 1, colorUsing)
    if sizeToDraw == 4:
        mouseRelPosX = max(penSize - 2, min(g1.xCount - 3, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 2, min(g1.yCount - 3, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX, colorUsing)
    if sizeToDraw == 5:
        mouseRelPosX = max(penSize - 3, min(g1.xCount - 3, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 3, min(g1.yCount - 3, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX + 1, colorUsing)

