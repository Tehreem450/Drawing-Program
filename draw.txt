#Reference:https://github.com/Burakcoli/Pyint_Pixel-Painter.git
import pygame as pg
from tkinter import *
from tkinter import messagebox
from tkinter.filedialog import askopenfilename, asksaveasfilename
import sys

sys.setrecursionlimit(10000)
pg.init()

sw, sh = 960, 850
sc = (sw//2, sh//2)
screen = pg.display.set_mode((sw, sh))
pg.display.set_caption("PyDraw By Tahrim and Anzila")
pg.display.set_icon(pg.image.load("icon.png"))

fillImage = pg.transform.scale(pg.image.load("fill.png"), (40,40))
brushImage = pg.transform.scale(pg.image.load("brush.png"), (25,25))
eraserImage = pg.transform.scale(pg.image.load("eraser.png"), (25,25))
dropperImage = pg.transform.scale(pg.image.load("eyedropper.png"), (30,30))

def Remap(oldlow, oldhigh, newlow, newhigh, value):
    oldRange = (oldhigh - oldlow)
    newRange = (newhigh - newlow)
    newVal = (((value - oldlow) * newRange) / oldRange) + newlow
    return newVal



def draw_walls():
    wall_color = (50,50,50)
    wall_thickness = 4

    pg.draw.rect(screen, (150,150,150), (g1.xCount * g1.cellSize, 0, sw - g1.xCount * g1.cellSize, g1.yCount*g1.cellSize))
    pg.draw.rect(screen, (80,80,80), (0, g1.xCount * g1.cellSize, sw, sh-g1.yCount*g1.cellSize))

    pg.draw.rect(screen, wall_color, (g1.xCount * g1.cellSize, 0, wall_thickness, g1.yCount*g1.cellSize))
    pg.draw.rect(screen, wall_color, (0, g1.yCount*g1.cellSize-wall_thickness, sw, wall_thickness))

    pg.draw.rect(screen, wall_color, (0, 0, sw, wall_thickness))
    pg.draw.rect(screen, wall_color, (sw-wall_thickness, 0, wall_thickness, sh))
    pg.draw.rect(screen, wall_color, (0, 0, wall_thickness, sh))
    pg.draw.rect(screen, wall_color, (0, sh - wall_thickness, sw, wall_thickness))


class Cell(object):

    def __init__(self, size, color=[0, 0, 0]):
        self.size = size
        self.color = color
        self.subsurface = pg.Surface((self.size,self.size))
        self.subsurface.fill(self.color)
        self.pos = (0, 0)

    def change_color(self, color):
        self.color = color
        self.subsurface.fill(self.color)

    def Draw(self, win, x, y):
        self.pos = (x, y)
        win.blit(self.subsurface, self.pos)


if sizeToDraw == 1:
        mouseRelPosX = max(penSize - 1, min(g1.xCount - 1, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 1, min(g1.yCount - 1, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
    if sizeToDraw == 2:
        mouseRelPosX = max(penSize - 1, min(g1.xCount - 2, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 1, min(g1.yCount - 2, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
    if sizeToDraw == 3:
        mouseRelPosX = max(penSize - 2, min(g1.xCount - 2, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 2, min(g1.yCount - 2, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 1, colorUsing)
    if sizeToDraw == 4:
        mouseRelPosX = max(penSize - 2, min(g1.xCount - 3, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 2, min(g1.yCount - 3, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX, colorUsing)
    if sizeToDraw == 5:
        mouseRelPosX = max(penSize - 3, min(g1.xCount - 3, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
        mouseRelPosY = max(penSize - 3, min(g1.yCount - 3, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))
        g1.change_color(mouseRelPosY, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX - 2, colorUsing)
        g1.change_color(mouseRelPosY, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 1, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY - 1, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX + 2, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY + 2, mouseRelPosX + 1, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX - 1, colorUsing)
        g1.change_color(mouseRelPosY - 2, mouseRelPosX + 1, colorUsing)


def neighbours(x,y):
    return [[x+1,y],[x-1,y],[x,y+1],[x,y-1]]


def fill(gridObject, posX, posY, colorNow, fillColor):

    if posX < 0 or posY < 0:

        return
    if posX >= gridObject.xCount or posY >= gridObject.yCount:

        return
    if gridObject.grid[posX][posY].color != colorNow:
        return
    if [posX, posY] in visitedFillPositions:
        return


    visitedFillPositions.append([posX, posY])
    gridObject.change_color(posY, posX, fillColor)
    moves = neighbours(posX, posY)
    for move in moves:
        fill(gridObject, move[0], move[1], colorNow, fillColor)


def tool_activate(toolIndex):
    global colorUsing
    if toolIndex == 0:
        colorUsing = selectedColor.copy()
    if toolIndex == 1:
        colorUsing = g1.color.copy()
    if toolIndex == 2:
        colorUsing = selectedColor.copy()
    if toolIndex == 3:
        colorUsing = selectedColor.copy()

def FileManager():
    global fileName
    window = Tk()
    window.withdraw()
    availableFormats = [("Portable Network Graphics", "*.png")]

    filepath = asksaveasfilename(title="Save File", filetypes=availableFormats)
    fileName = filepath.split("/")[-1]+".png"
    return filepath[:]

def Capture(display,path,pos,size):         # (pygame Surface, String, tuple, tuple)
    image = pg.Surface(size)                # Create image surface
    image.blit(display,(0,0),(pos,size))    # Blit portion of the display to the image
    pg.image.save(image,path)               # Save the image to the disk
    name = path.split("/")[-1]
    pg.display.set_caption("PyDraw By Tahrim and Anzila - " + name)

def key_event_up(event):
    global penSize, undoed, holdingCTRL, colorScheme, selectedTool

    if event.key == pg.K_1:
        colorScheme = 1
    elif event.key == pg.K_2:
        colorScheme = 2

    if event.key == pg.K_e:
        selectedTool = 1
        B_Buttons[1].clicked = True
        for subbutton in B_Buttons:
            if B_Buttons.index(subbutton) != selectedTool:
                subbutton.clicked = False
    elif event.key == pg.K_b:
        selectedTool = 0
        B_Buttons[0].clicked = True
        for subbutton in B_Buttons:
            if B_Buttons.index(subbutton) != selectedTool:
                subbutton.clicked = False
    elif event.key == pg.K_g:
        selectedTool = 2
        B_Buttons[2].clicked = True
        for subbutton in B_Buttons:
            if B_Buttons.index(subbutton) != selectedTool:
                subbutton.clicked = False
    elif event.key == pg.K_i:
        selectedTool = 3
        B_Buttons[3].clicked = True
        for subbutton in B_Buttons:
            if B_Buttons.index(subbutton) != selectedTool:
                subbutton.clicked = False

    if event.key == pg.K_LCTRL:
        holdingCTRL = False

    if event.key == pg.K_SPACE:
        if holdingCTRL:
            g1.clean()
            undoed = True

    if event.key == pg.K_s:
        if holdingCTRL:
            shortcutPath = FileManager(1)
            SaveFile(g1, shortcutPath)

    if event.key == pg.K_z:
        if holdingCTRL:

            for i in range(g1.yCount):
                for j in range(g1.xCount):
                    if round == 1:
                        g1.change_color(j, i, g1.undoList[1][i][j])
                    if round == -1:
                        g1.change_color(j, i, g1.undoList[0][i][j])
            undoed = True



while True:
    clock.tick(240)

    if undoed:
        for i in range(g1.xCount):
            for j in range(g1.yCount):
                    g1.undoList[0][i][j] = g1.grid[i][j].color
                    g1.undoList[1][i][j] = g1.grid[i][j].color
        undoed = False

    for event in pg.event.get():
        if event.type == pg.QUIT:
            pg.quit()
            sys.exit()

        if event.type == pg.MOUSEBUTTONDOWN:
            if event.button == 3:
                selectedToolBefore = selectedTool
                selectedTool = 1
            elif event.button == 1:
                if pg.mouse.get_pos()[0] < g1.xCount*g1.cellSize and pg.mouse.get_pos()[1] < g1.yCount*g1.cellSize:
                    if selectedTool == 0 or selectedTool == 1:
                        paint(selectedTool)
                        clicking = True
                    elif selectedTool == 2:
                        mouseRelPosX = max(0, min(g1.xCount - 1, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
                        mouseRelPosY = max(0, min(g1.yCount - 1, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))

                        visitedFillPositions.clear()

                        fill(g1, mouseRelPosX, mouseRelPosY, g1.grid[mouseRelPosX][mouseRelPosY].color, selectedColor)
                    elif selectedTool == 3:
                        mouseRelPosX = max(0, min(g1.xCount - 1, int(Remap(0, (g1.cellSize * g1.xCount), 0, g1.xCount, pg.mouse.get_pos()[0]))))
                        mouseRelPosY = max(0, min(g1.yCount - 1, int(Remap(0, (g1.cellSize * g1.yCount), 0, g1.yCount, pg.mouse.get_pos()[1]))))

                        selectedColor = g1.grid[mouseRelPosX][mouseRelPosY].color

                else:
                    if colorScheme == 1:
                        for i, Scolor in enumerate(colorCells1):
                            if Scolor.subsurface.get_rect(topleft=positions1[i]).collidepoint(pg.mouse.get_pos()):
                                selectedColor = Scolor.color
                    elif colorScheme == 2:
                        for i, Scolor in enumerate(colorCells2):
                            if Scolor.subsurface.get_rect(topleft=positions2[i]).collidepoint(pg.mouse.get_pos()):
                                selectedColor = Scolor.color
                    for but in S_buttons:
                        if but.subsurface.get_rect(topleft=(but.pos[0]-but.width/2, but.pos[1])).collidepoint(pg.mouse.get_pos()):
                            but.active = True
                        else:
                            but.active = False
                    for i,but in enumerate(SL_Buttons):
                        if but.rollOver:
                            if i == 0:
                                cPath = FileManager()
                                Capture(screen, cPath + ".png", (4,4), (764,760))

                    for but in B_Buttons:
                        if but.rollOver:
                            but.clicked = True
                            selectedTool = B_Buttons.index(but)
                            for subbutton in B_Buttons:
                                if B_Buttons.index(subbutton) != selectedTool:
                                    subbutton.clicked = False
                    for but in P_Buttons:
                        if but.rollOver:
                            but.clicked = True
                            colorScheme = P_Buttons.index(but)+1
                            for subbutton in P_Buttons:
                                if P_Buttons.index(subbutton) != selectedTool:
                                    subbutton.clicked = False

        if event.type == pg.MOUSEBUTTONUP:
            if event.button == 3:
                selectedTool = selectedToolBefore
            elif event.button == 1:
                for i in range(g1.xCount):
                    for j in range(g1.yCount):
                        if round == -1:
                            g1.undoList[0][i][j] = g1.grid[i][j].color
                        if round == 1:
                            g1.undoList[1][i][j] = g1.grid[i][j].color
                round *= -1
                clicking = False

                for but in S_buttons:
                    but.active = False

        if event.type == pg.MOUSEMOTION:
            if pg.mouse.get_pos()[0] < g1.xCount * g1.cellSize and pg.mouse.get_pos()[1] < g1.yCount * g1.cellSize:
                pg.mouse.set_visible(False)
            else:
                pass
                pg.mouse.set_visible(True)
            if clicking:
                if pg.mouse.get_pos()[0] < g1.xCount * g1.cellSize and pg.mouse.get_pos()[1] < g1.yCount * g1.cellSize:
                    paint(selectedTool)
            else:
                for but in SL_Buttons:
                    if but.subsurface.get_rect(topleft=but.pos).collidepoint(pg.mouse.get_pos()):
                        but.rollOver = True
                    else:
                        but.rollOver = False
                for but in B_Buttons:
                    if but.subsurface.get_rect(topleft=but.pos).collidepoint(pg.mouse.get_pos()):
                        but.rollOver = True
                    else:
                        but.rollOver = False
                for but in S_buttons:
                    if but.active:
                        but.pos[0] = max(but.drawPos[0]-60, min(pg.mouse.get_pos()[0], but.drawPos[0]+60))
                    else:
                        but.active = False
                for but in P_Buttons:
                    if but.subsurface.get_rect(topleft=but.pos).collidepoint(pg.mouse.get_pos()):
                        but.rollOver = True
                    else:
                        but.rollOver = False



        if event.type == pg.KEYDOWN:
            if event.key == pg.K_LCTRL:
                holdingCTRL = True

        if event.type == pg.KEYUP:
            key_event_up(event)

    tool_activate(selectedTool)

    screen.fill((255, 255, 255))
    g1.Draw(screen)
    draw_walls()
    
    for but in SL_Buttons:
        but.Draw(screen)

    screen.blit(colorTitleFont.render("Tools", True, (50,50,50)), (779, 30))
    pg.draw.rect(screen, (180,180,180), (779, 50, 170, 100))
    for but in B_Buttons:
        but.Draw(screen)

    for but in P_Buttons:
        but.Draw(screen)

    screen.blit(colorTitleFont.render("Size Settings", True, (50, 50, 50)), (779, 170))
    S_brushSize.Draw(screen, penSize)
    S_eraserSize.Draw(screen, eraserSize)
    penSize = int(S_brushSize.slideVal)
    eraserSize = int(S_eraserSize.slideVal)

    screen.blit(nameSurface, (310, 790))
    nameText = fileFont.render(fileName, True, (0, 0, 0))
    screen.blit(nameText, (320,sh-50))
    
    screen.blit(pg.transform.scale(fillImage, (22,22)), (B_fillTool.pos[0]+3, B_fillTool.pos[1]+2))
    screen.blit(pg.transform.scale(eraserImage, (22,22)), (B_eraserTool.pos[0]+3, B_eraserTool.pos[1]+2))
    screen.blit(pg.transform.scale(brushImage, (22,22)), (B_penTool.pos[0]+3, B_penTool.pos[1]+2))
    screen.blit(pg.transform.scale(dropperImage, (22,22)), (B_eyeDropper.pos[0]+3, B_eyeDropper.pos[1]+2))

    draw_palette(colorScheme)

    if selectedTool == 0:
        if pg.mouse.get_pos()[0] < g1.xCount * g1.cellSize and pg.mouse.get_pos()[1] < g1.yCount * g1.cellSize:
            pg.draw.circle(screen, colorUsing, (pg.mouse.get_pos()), penSize * 8, 1)
    elif selectedTool == 1:
        if pg.mouse.get_pos()[0] < g1.xCount * g1.cellSize and pg.mouse.get_pos()[1] < g1.yCount * g1.cellSize:
            pg.draw.circle(screen, (50,50,50), (pg.mouse.get_pos()), eraserSize * 8, 1)
    elif selectedTool == 2:
        if pg.mouse.get_pos()[0] < g1.xCount * g1.cellSize and pg.mouse.get_pos()[1] < g1.yCount * g1.cellSize:
            screen.blit(fillImage, (pg.mouse.get_pos()[0], pg.mouse.get_pos()[1]-35))
    elif selectedTool == 3:
        if pg.mouse.get_pos()[0] < g1.xCount * g1.cellSize and pg.mouse.get_pos()[1] < g1.yCount * g1.cellSize:
            screen.blit(dropperImage, (pg.mouse.get_pos()[0], pg.mouse.get_pos()[1]-30))



    pg.display.update()
